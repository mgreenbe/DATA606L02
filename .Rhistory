x
set.seed(42)
x=seq(1:15)
x
x=seq(1:15)
x
x=seq(1:15)
x
x = seq(1:15)
s = sample(x, size=10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = seq(1:15)
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = 1:15
s = sample(x, size = 10, replace = FALSE)
s
set.seed(42)
x = 1:15
s = sample(x, size = 10, replace = FALSE)
s
x
set.seed(42)
x = 1:15
s = sample(x, size = 10, replace = FALSE)
s
x
set.seed(42)
x = 1:15
s = sample(1:4, size = 10, replace = FALSE)
set.seed(42)
x = 1:15
s = sample(1:4, size = 10)
set.seed(42)
x = 1:15
s = sample(1:4, size = 10)
set.seed(42)
s = sample(1:4, size = 10, replace = TRUE)
s
set.seed(42)
s <- sample(1:4, size = 10, replace = TRUE)
print(s)
set.seed(42)
s <- sample(1:4, size = 10, replace = TRUE)
print(s)
set.seed(42)
s <- sample(1:4, size = 10, replace = TRUE)
s
set.seed(42)
s <- sample(1:10, size = 10, replace = TRUE)
s
set.seed(42)
s <- sample(1:10, size = 10, replace = TRUE)
s
set.seed(42)
s <- sample(1:10, size = 10)
s
set.seed(42)
s <- sample(1:10, size = 10)
sort(s)
set.seed(42)
s <- sample(1:10, size = 10)
s, sort(s)
set.seed(42)
s <- sample(1:10, size = 10)
print(s, sort(s))
set.seed(42)
s <- sample(1:10, size = 10)
print(s)
print(sort(s))
set.seed(42)
s <- sample(1:10, size = 10)
print("abc" + s)
set.seed(42)
s <- sample(1:10, size = 10)
print("abc", s)
print(sort(s))
install.packages("glue")
library(glue)
x <- c(1, 4, 9)
glue("x = {x}")
library(glue)
x <- c(1, 4, 9)
glue("x = {toString(x)}")
set.seed(42)
s <- sample(1:10, size = 10)
print(s)
print(sort(s))
sprintf("s = %s", toString(s))
set.seed(42)
s <- sample(1:10, size = 10)
print(s)
print(sort(s))
sprintf("s = %s", toString(s))
set.seed(42)
s <- sample(1:10, size = 10)
sprintf("s = %s", toString(s))
set.seed(42)
s <- sample(1:10, size = 10)
sprintf("s = %s", toString(s))
s
set.seed(42)
s <- sample(1:10, size = 10)
sprintf("s = %s", toString(s))
sprintf("sort(s) = %s", toString(sort(s)))
s
set.seed(42)
s <- sample(1:10, size = 10)
sprintf("s       = %s", toString(s))
sprintf("sort(s) = %s", toString(sort(s)))
set.seed(42)
s <- sample(1:10, size = 10)
sprintf("s = %s", toString(s))
sprintf("sort(s) = %s", toString(sort(s)))
'a':'z'
"a":"z"
set.seed(42)
s <- sample(0:9, size = 10)
sprintf("s = %s", toString(s))
sprintf("sort(s) = %s", toString(sort(s)))
set.seed(42)
s <- sample(0:9, size = 10)
sprintf("s       = %s", toString(s))
sprintf("sort(s) = %s", toString(sort(s)))
s <- sample(0:2, size = 10, replace = TRUE)
s <- sample(0:2, size = 10, replace = TRUE)
s
s <- sample(0:2, size = 20, replace = TRUE)
s
s <- sample(0:2, size = 20, replace = TRUE)
s
s <- sample(0:2, size = 20, replace = TRUE)
s
s <- sample(0:2, size = 20, replace = TRUE)
s
s <- sample(0:2, size = 20, replace = TRUE)
s
s <- sample(0:2, size = 20, replace = TRUE)
s
s <- sample(c("x", "y"), size = 20, replace = TRUE)
s
s <- sample(c("x", "y"), size = 10, replace = TRUE)
s
s <- sample(c('x', 'y'), size = 10, replace = TRUE)
s
s1 <- sample(0:1, size = 10, replace = TRUE)
s
s1 <- sample(0:1, size = 10, replace = TRUE)
s1
s <- sample(0:2, size = 10, replace = TRUE)
s
s <- sample(0:2, size = 10, replace = TRUE)
s
sample(0:4, size=20)
sample(0:4, size=20, replace = TRUE)
sample(0:4, size=20, replace = TRUE, prob = c(1, 4, 6, 4, 1))
sample(0:4, size=20, replace = TRUE, prob = c(1, 4, 6, 4, 1))
sample(0:4, size=20, replace = TRUE, prob = c(1, 4, 6, 4, 1))
sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
barplot(s)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 4)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 4)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 4)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 4)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 4)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 5)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 5)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 5)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
print(s)
hist(s, breaks = 5)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 5)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
s
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = 0:4)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
hist(s, breaks = -1:5)
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
s + 0.5
s <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
counts(s)
x <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
table(x)
x <- sample(0:4, size=100, replace = TRUE, prob = c(1, 4, 6, 4, 1))
barplot(table(x))
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
barplot(table(x))
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y[0]
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y[1]
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y[2]
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
type(y[2])
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
typeof(y[2])
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
print(toString(y))
barplot(table(x))
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
print(y)
barplot(table(x))
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y
x <- sample(0:4, size=1000, replace = TRUE, prob = c(1, 4, 6, 4, 1))
y <- table(x)
y
barplot(y)
library(truncnorm)
install.packages("truncnorm")
library(truncnorm)
N <- 1000
library(truncnorm)
N <- 1000
x <- rtruncnorm(N, a = 0, b = 100, mean = 80, sd = 3)
library(truncnorm)
N <- 1000
x <- rtruncnorm(N, a = 0, b = 100, mean = 80, sd = 3)
hist(x, xlab = "grade")
library(truncnorm)
N <- 1000
x <- rtruncnorm(N, a = 0, b = 100, mean = 80, sd = 3)
hist(x, xlab = "grade", ylab = "count")
mean(x)
sprintf("sample mean = %s", mean(x))
sprintf("sample std  = %s", std(x))
sprintf("sample mean = %s", mean(x))
sprintf("sample sd  = %s", sd(x))
sprintf("sample mean = %.2f", mean(x))
sprintf("sample sd  = %.2f", sd(x))
sprintf("sample mean = %.4f", mean(x))
sprintf("sample sd   = %.4f", sd(x))
pop = runif(20)
pop
sample(pop, 15)
sample(pop, 15, replace = TRUE)
ind = sample(1:20, 15)
ind
pop[ind]
pop
read.csv("apipop.csv")
pop = read.csv("apipop.csv")
sample(pop, size=10)
x = sample(pop, size=10)
x
type(x)
typeof(x0)
typeof(x)
x
pop
typeof(pop)
library(truncnorm)
rtruncnorm(1000, -2, 3)
x = rtruncnorm(1000, -2, 3)
hist(x)
U = 1:1000
U
I = runif(100)
I = runif(1000)
sort(I)
order(I)
J = order(I)
I[J]
I[J] == sort(I)
all(I[J] == sort(I))
U[I[J[1:100]]]
J[1:100]
K = J[1:100]
U
U[K]
